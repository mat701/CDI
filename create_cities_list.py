#!/usr/bin/env python3
"""
Generate city lists for the City Map Gallery.

For each subfolder in ./data/, expects:
  - hexes.geojson
  - cdi.csv

Outputs:
  data/index.json   → metadata list with centroid & zoom per city
  data/cities.js    → JS file defining CITIES_CENTERS and CITIES_NAMES
"""

import geopandas as gpd
from pathlib import Path
import json

# ---------------------------------------------------------------------
# SETTINGS
# ---------------------------------------------------------------------
DATA_DIR = Path("data")
OUTPUT_JSON = DATA_DIR / "index.json"
OUTPUT_JS = DATA_DIR / "cities.js"
DEFAULT_ZOOM = 10
# ---------------------------------------------------------------------

def compute_centroid(geojson_path):
    """Return centroid [lat, lon] of a GeoJSON file using GeoPandas."""
    try:
        gdf = gpd.read_file(geojson_path)
        if gdf.empty:
            return [0, 0]
        # unified centroid in EPSG:4326
        centroid = gdf.to_crs(4326).geometry.union_all().centroid
        return [round(centroid.y, 6), round(centroid.x, 6)]
    except Exception as e:
        print(f"⚠️  Failed to compute centroid for {geojson_path}: {e}")
        return [0, 0]

def main():
    city_meta = []
    city_names = []
    city_centers = []

    for city_dir in sorted(DATA_DIR.iterdir()):
        if not city_dir.is_dir():
            continue

        geojson_path = city_dir / "hexes.geojson"
        csv_path = city_dir / "cdi.csv"
        if not (geojson_path.exists() and csv_path.exists()):
            continue

        slug = city_dir.name
        name = slug.capitalize()
        center = compute_centroid(geojson_path)

        city_meta.append({
            "slug": slug,
            "name": name,
            "center": center,
            "zoom": DEFAULT_ZOOM
        })
        city_names.append(name)
        city_centers.append(center)

    # Write JSON manifest
    with open(OUTPUT_JSON, "w", encoding="utf-8") as f:
        json.dump(city_meta, f, ensure_ascii=False, indent=2)

    # Write JS arrays for quick embedding if desired
    with open(OUTPUT_JS, "w", encoding="utf-8") as f:
        f.write("// Auto-generated by generate_manifest.py\n")
        f.write(f"const CITIES_NAMES = {json.dumps(city_names, ensure_ascii=False, indent=2)};\n")
        f.write(f"const CITIES_CENTERS = {json.dumps(city_centers, ensure_ascii=False, indent=2)};\n")

    print(f"✅ Generated {OUTPUT_JSON} and {OUTPUT_JS} for {len(city_meta)} cities.")

if __name__ == "__main__":
    main()
